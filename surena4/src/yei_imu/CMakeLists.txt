##############################################################################
# CMake
##############################################################################

cmake_minimum_required(VERSION 2.8.0)
project(yei_imu)

##############################################################################
# Catkin
##############################################################################

# qt_build provides the qt cmake glue, roscpp the comms for a default talker
find_package(catkin REQUIRED COMPONENTS  roscpp sensor_msgs    message_generation message_runtime)
set(LIBUSB_1_LIBRARIES "/usr/lib/x86_64-linux-gnu/libusb-1.0.so")
include_directories(include ${catkin_INCLUDE_DIRS})
# Use this to define what the package will export (e.g. libs, headers).
# Since the default here is to produce only a binary, we don't worry about
# exporting anything.

#add_message_files(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/msg FILES num.msg)
#add_service_files(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/srv FILES active_csp.srv)
#add_service_files(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/srv FILES reset_node.srv)
### Generate added messages and services with any dependencies listed here
# generate_messages(
#   DEPENDENCIES
#   std_msgs  # Or other packages containing msgs
# )



catkin_package()
message(${CMAKE_CURRENT_SOURCE_DIR})
##############################################################################
# Qt Environment
##############################################################################

set(CMAKE_INCLUDE_CURRENT_DIR ON)
set(CMAKE_AUTOMOC ON)
#SET(CMAKE_AUTOUIC ON)

find_package(Qt5 COMPONENTS Core Gui Widgets PrintSupport Qt5SerialPort)

##############################################################################
# Sections
##############################################################################

file(GLOB QT_FORMS RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} ui/*.ui)
file(GLOB QT_RESOURCES RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} resources/*.qrc)


QT5_ADD_RESOURCES(QT_RESOURCES_CPP ${QT_RESOURCES})
QT5_WRAP_UI(QT_FORMS_HPP ${QT_FORMS})

include_directories(
    ${Qt5Core_INCLUDE_DIRS}
    ${Qt5Gui_INCLUDE_DIRS}
    ${Qt5Widgets_INCLUDE_DIRS}
    ${Qt5PrintSupport_INCLUDE_DIRS}
    ${QtSerialPort_INCLUDE_DIRS}
    )

add_definitions( -std=c++11 -fPIC)
##############################################################################
# Sources
##############################################################################

set( QT_SOURCES
    src/yei.cpp
    )
##############################################################################
# Binaries
##############################################################################

add_executable(yei_imu ${QT_SOURCES} ${QT_RESOURCES_CPP} ${QT_FORMS_HPP} ${QT_MOC_HPP})
qt5_use_modules(yei_imu Core SerialPort)
target_link_libraries(yei_imu
    ${catkin_LIBRARIES}
    Qt5::Core
    Qt5::Widgets
    Qt5::PrintSupport
    Qt5::SerialPort
    ${LIBUSB_1_LIBRARIES}
)
install(TARGETS yei_imu RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION})

#add_executable(yei src/yei.cpp ${QT_SOURCES} ${QT_RESOURCES_CPP} ${QT_FORMS_HPP} ${QT_MOC_HPP})
#target_link_libraries(yei
#    ${catkin_LIBRARIES}
#    Qt5::Core
#    Qt5::Widgets
#    Qt5::PrintSupport
#)
#install(TARGETS yei RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION})


#cmake_minimum_required(VERSION 2.8.3)
#project(surena_usb)

### Compile as C++11, supported in ROS Kinetic and newer
## add_compile_options(-std=c++11)

### Find catkin macros and libraries
### if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)
### is used, also find other catkin packages
#find_package(catkin REQUIRED)

### System dependencies are found with CMake's conventions
## find_package(Boost REQUIRED COMPONENTS system)


### Uncomment this if the package has a setup.py. This macro ensures
### modules and global scripts declared therein get installed
### See http://ros.org/doc/api/catkin/html/user_guide/setup_dot_py.html
## catkin_python_setup()

#################################################
### Declare ROS messages, services and actions ##
#################################################

### To declare and build messages, services or actions from within this
### package, follow these steps:
### * Let MSG_DEP_SET be the set of packages whose message types you use in
###   your messages/services/actions (e.g. std_msgs, actionlib_msgs, ...).
### * In the file package.xml:
###   * add a build_depend tag for "message_generation"
###   * add a build_depend and a exec_depend tag for each package in MSG_DEP_SET
###   * If MSG_DEP_SET isn't empty the following dependency has been pulled in
###     but can be declared for certainty nonetheless:
###     * add a exec_depend tag for "message_runtime"
### * In this file (CMakeLists.txt):
###   * add "message_generation" and every package in MSG_DEP_SET to
###     find_package(catkin REQUIRED COMPONENTS ...)
###   * add "message_runtime" and every package in MSG_DEP_SET to
###     catkin_package(CATKIN_DEPENDS ...)
###   * uncomment the add_*_files sections below as needed
###     and list every .msg/.srv/.action file to be processed
###   * uncomment the generate_messages entry below
###   * add every package in MSG_DEP_SET to generate_messages(DEPENDENCIES ...)

### Generate messages in the 'msg' folder
## add_message_files(


### Generate services in the 'srv' folder
## add_service_files(
##   FILES
##   Service1.srv
##   Service2.srv
## )

### Generate actions in the 'action' folder
## add_action_files(
##   FILES
##   Action1.action
##   Action2.action
## )

### Generate added messages and services with any dependencies listed here
## generate_messages(
##   DEPENDENCIES
##   std_msgs  # Or other packages containing msgs
## )

#################################################
### Declare ROS dynamic reconfigure parameters ##
#################################################

### To declare and build dynamic reconfigure parameters within this
### package, follow these steps:
### * In the file package.xml:
###   * add a build_depend and a exec_depend tag for "dynamic_reconfigure"
### * In this file (CMakeLists.txt):
###   * add "dynamic_reconfigure" to
###     find_package(catkin REQUIRED COMPONENTS ...)
###   * uncomment the "generate_dynamic_reconfigure_options" section below
###     and list every .cfg file to be processed

### Generate dynamic reconfigure parameters in the 'cfg' folder
## generate_dynamic_reconfigure_options(
##   cfg/DynReconf1.cfg
##   cfg/DynReconf2.cfg
## )

####################################
### catkin specific configuration ##
####################################
### The catkin_package macro generates cmake config files for your package
### Declare things to be passed to dependent projects
### INCLUDE_DIRS: uncomment this if your package contains header files
### LIBRARIES: libraries you create in this project that dependent projects also need
### CATKIN_DEPENDS: catkin_packages dependent projects also need
### DEPENDS: system dependencies of this project that dependent projects also need
#catkin_package(
##  INCLUDE_DIRS include
##  LIBRARIES surena_usb
##  CATKIN_DEPENDS other_catkin_pkg
##  DEPENDS system_lib
#)

############
### Build ##
############

### Specify additional locations of header files
### Your package locations should be listed before other locations
#include_directories(
## include
## ${catkin_INCLUDE_DIRS}
#)

### Declare a C++ library
## add_library(${PROJECT_NAME}
##   src/${PROJECT_NAME}/surena_usb.cpp
## )

### Add cmake target dependencies of the library
### as an example, code may need to be generated before libraries
### either from message generation or dynamic reconfigure
## add_dependencies(${PROJECT_NAME} ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})

### Declare a C++ executable
### With catkin_make all packages are built within a single CMake context
### The recommended prefix ensures that target names across packages don't collide
## add_executable(${PROJECT_NAME}_node src/surena_usb_node.cpp)

### Rename C++ executable without prefix
### The above recommended prefix causes long target names, the following renames the
### target back to the shorter version for ease of user use
### e.g. "rosrun someones_pkg node" instead of "rosrun someones_pkg someones_pkg_node"
## set_target_properties(${PROJECT_NAME}_node PROPERTIES OUTPUT_NAME node PREFIX "")

### Add cmake target dependencies of the executable
### same as for the library above
## add_dependencies(${PROJECT_NAME}_node ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})

### Specify libraries to link a library or executable target against
## target_link_libraries(${PROJECT_NAME}_node
##   ${catkin_LIBRARIES}
## )

##############
### Install ##
##############

## all install targets should use catkin DESTINATION variables
## See http://ros.org/doc/api/catkin/html/adv_user_guide/variables.html

### Mark executable scripts (Python etc.) for installation
### in contrast to setup.py, you can choose the destination
## install(PROGRAMS
##   scripts/my_python_script
##   DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
## )

### Mark executables and/or libraries for installation
## install(TARGETS ${PROJECT_NAME} ${PROJECT_NAME}_node
##   ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
##   LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
##   RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
## )

### Mark cpp header files for installation
## install(DIRECTORY include/${PROJECT_NAME}/
##   DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}
##   FILES_MATCHING PATTERN "*.h"
##   PATTERN ".svn" EXCLUDE
## )

### Mark other files for installation (e.g. launch and bag files, etc.)
## install(FILES
##   # myfile1
##   # myfile2
##   DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}
## )

##############
### Testing ##
##############

### Add gtest based cpp test target and link libraries
## catkin_add_gtest(${PROJECT_NAME}-test test/test_surena_usb.cpp)
## if(TARGET ${PROJECT_NAME}-test)
##   target_link_libraries(${PROJECT_NAME}-test ${PROJECT_NAME})
## endif()

### Add folders to be run by python nosetests
## catkin_add_nosetests(test)
